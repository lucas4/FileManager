<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:FileManagerWPF">

    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    
    <!--#region ikonki -->
    <BitmapImage x:Key="IconCancel" UriSource="/Images/Icons/Cancel.png" />
    <BitmapImage x:Key="IconAddFolder" UriSource="/Images/Icons/Add-Folder.png" />
    <BitmapImage x:Key="IconAddFile" UriSource="/Images/Icons/Add-File.png" />
    <BitmapImage x:Key="IconEditFile" UriSource="/Images/Icons/Edit-File.png" />
    <BitmapImage x:Key="IconDelete" UriSource="/Images/Icons/Delete.png" />
    <BitmapImage x:Key="IconWindowsClient" UriSource="/Images/Icons/Windows-Client.png" />
    <BitmapImage x:Key="IconList" UriSource="/Images/Icons/List.png" />
    <BitmapImage x:Key="IconSmallIcons" UriSource="/Images/Icons/Small-Icons.png" />
    <BitmapImage x:Key="IconMediumIcons" UriSource="/Images/Icons/Medium-Icons.png" />
    <BitmapImage x:Key="IconBack" UriSource="/Images/Icons/Back.png" />
    <BitmapImage x:Key="IconForward" UriSource="/Images/Icons/Forward.png" />
    <BitmapImage x:Key="IconCollapseArrow" UriSource="/Images/Icons/Collapse-Arrow.png" />
    <BitmapImage x:Key="IconSynchronize" UriSource="/Images/Icons/Synchronize.png" />
    <!--#endregion-->

    <!--#region template dla ikonek/obiektow w folderze -->
    <DataTemplate x:Key="ListViewBigView">
        <WrapPanel Orientation="Vertical" Width="48">
            <Image Width="48" Height="48" Stretch="Fill" Source="{Binding Image}" />
            <TextBlock MaxHeight="46" LineHeight="15" LineStackingStrategy="BlockLineHeight" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" Text="{Binding File.Name}" HorizontalAlignment="Center" />
        </WrapPanel>
    </DataTemplate>
    <DataTemplate x:Key="ListViewSmallView">
        <WrapPanel Orientation="Horizontal" Height="24" Width="180">
            <Image Width="24" Height="24" Stretch="Fill" Source="{Binding Image}" Margin="0,0,5,0"/>
            <TextBlock MaxWidth="150" TextTrimming="CharacterEllipsis" Text="{Binding File.Name}" VerticalAlignment="Center" />
        </WrapPanel>
    </DataTemplate>
    <DataTemplate x:Key="ListViewDetailsView">
        <UniformGrid Columns="2">
            <StackPanel>
                <Image Width="24" Height="24" Stretch="Fill" Source="{Binding Image}" Margin="0,0,5,0"/>
                <TextBlock MaxWidth="30" TextTrimming="CharacterEllipsis" Text="efef" />
            </StackPanel>
            <TextBlock MaxWidth="30" TextTrimming="CharacterEllipsis" Text="efef" />
            <TextBlock MaxWidth="30" TextTrimming="CharacterEllipsis" Text="{Binding File.Name}" />
        </UniformGrid>
    </DataTemplate>
    <!--#endregion-->
    
    <!--#region template dla listy folderów -->
    <ItemsPanelTemplate x:Key="ListViewListItemsPanel">
        <StackPanel Orientation="Vertical" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="ListViewIconItemsPanel">
        <WrapPanel IsItemsHost="True" Orientation="Horizontal" />
    </ItemsPanelTemplate>
    <GridView x:Key="ListViewDetailsGridView">
        <GridViewColumn Width="250" Header="Nazwa">
            <GridViewColumn.CellTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Width="18" Height="18" Stretch="Fill" Source="{Binding Image}" Margin="0,0,5,0"/>
                        <TextBlock TextTrimming="CharacterEllipsis" Foreground="Black" Text="{Binding File.Name}" />
                    </StackPanel>
                </DataTemplate>
            </GridViewColumn.CellTemplate>
        </GridViewColumn>
        <GridViewColumn Width="120" Header="Data modyfikacji">
            <GridViewColumn.CellTemplate>
                <DataTemplate>
                    <TextBlock Foreground="Black" Text="{Binding File.LastWriteTime, StringFormat='dd.MM.yyy HH:mm'}" />
                </DataTemplate>
            </GridViewColumn.CellTemplate>
        </GridViewColumn>
        <GridViewColumn Width="100" Header="Rozmiar">
            <GridViewColumn.CellTemplate>
                <DataTemplate>
                    <TextBlock Foreground="Black" Text="{Binding File.Length, StringFormat='{}{0} KB'}" />
                </DataTemplate>
            </GridViewColumn.CellTemplate>
        </GridViewColumn>
    </GridView>
    <!--#endregion-->
    
    <!--#region przyciski -->
    <Style x:Key="BigButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Padding="4" CornerRadius="0" BorderThickness="1" Background="{TemplateBinding Background}">
                        <StackPanel>
                            <Image Height="30" Width="30" Source="{TemplateBinding Tag}" />
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#ccf3ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#00bfff" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#99e7ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#0099ff" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MediumButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" CornerRadius="0" Padding="2" BorderThickness="1" Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal">
                            <Image Height="16" Width="16" Source="{TemplateBinding Tag}" Margin="0,0,3,0" />
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#ccf3ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#00bfff" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#99e7ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#0099ff" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SmallButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="ButtonBorder" CornerRadius="0" Padding="2" BorderThickness="1">
                            <StackPanel Orientation="Horizontal">
                                <Image x:Name="Image" Height="16" Width="16" Source="{TemplateBinding Tag}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#ccf3ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#00bfff" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#99e7ff" />
                            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="#0099ff" />
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Grid" Property="Panel.Background" Value="#ccc" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <Style TargetType="{x:Type TextBox}" x:Key="AddressTextBox">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MinWidth"  Value="30" />
        <Setter Property="MinHeight"  Value="20" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                            Padding="2"
                            BorderThickness="1"
                            Background="White"
                            BorderBrush="#d9d9d9">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="Red"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="Green" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#cccccc" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#0099ff" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region to do usunieca-->
    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
    <!--#endregion-->
    
    <LinearGradientBrush x:Key="MenuPopupBrush"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}"
                      Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}"
                      Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}"
                      Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#000000FF"
                    Offset="0" />
                <GradientStop Color="#600000FF"
                    Offset="0.4" />
                <GradientStop Color="#600000FF"
                    Offset="0.6" />
                <GradientStop Color="#000000FF"
                    Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="{x:Type TreeView}"
       TargetType="TreeView">
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
          Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
          Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border" BorderThickness="0">
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                        </Border.Background>
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
          Width="15"
          Height="13"
          Background="Transparent">
                        <Path x:Name="ExpandPath"
            HorizontalAlignment="Left" 
            VerticalAlignment="Center" 
            Margin="1,1,1,1"
            Fill="{StaticResource GlyphBrush}"
            Data="M 4 0 L 8 4 L 4 8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
               Value="True">
                            <Setter Property="Data"
                TargetName="ExpandPath"
                Value="M 0 4 L 8 4 L 4 8 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0"
                 StrokeThickness="5"
                 Stroke="Black"
                 StrokeDashArray="1 2"
                 Opacity="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <!-- Style for the selected item -->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <!--<ControlTemplate.Resources>
                                        <Conv:LeftMarginMultiplierConverter Length="19" x:Key="lengthConverter" />
                                    </ControlTemplate.Resources>-->
                    <StackPanel ScrollViewer.CanContentScroll="False">
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource TreeViewMarginConverter}, RelativeSource={RelativeSource TemplatedParent}, ConverterParameter={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <ToggleButton Grid.Column="0" 
                                              x:Name="Expander"
                                              Style="{StaticResource ExpandCollapseToggleStyle}"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press"
                                              Visibility="{Binding Path=HasItems, Converter={StaticResource BoolToVis}}"/>
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Left" ContentSource="Header" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--<Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="true">
                            <!--<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                            <Setter TargetName="Bd" Property="Background" Value="#e0f5fc"/>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="#00bfff"/>
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>-->
                            <!--<Setter TargetName="Bd" Property="Background" Value="#FFDADADA"/>-->
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- Selected and has focus -->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="Orange" />
            </Trigger>
            <!-- Mouse over -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ccf3ff"/>
                <!--<Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFFAFBFD" Offset="0"/>
                                        <GradientStop Color="#fadfa3" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>-->
                <Setter Property="BorderBrush" Value="#00bfff"/>
            </Trigger>
            <!-- Selected but does not have the focus -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#f59246"/>
            </MultiTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="0"/>
            </Style>
        </Style.Resources>
    </Style>
    
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

</ResourceDictionary>